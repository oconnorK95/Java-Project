
//This code looped through all the chords using a thread, replaced with method
/* for(int i = 0; i<8;i++) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (i == 0) {
                musicGenerator.playChordC();
            } else if (i == 1) {
                musicGenerator.playChordD();
            } else if (i == 2) {
                musicGenerator.playChordE();
            } else if (i == 3) {
                musicGenerator.playChordF();
            } else if (i == 4) {
                musicGenerator.playChordG();
            } else if (i == 5) {
                musicGenerator.playChordA();
            } else if (i == 6) {
                musicGenerator.playChordB();
            } else if (i == 7) {
                musicGenerator.playChordHighC();
            }
        }//End for
        */

////////////////////////////////////////////////////////
//This was my interface, no longer being used
import javax.sound.midi.MidiChannel;
import javax.sound.midi.Synthesizer;

public interface MarkovChainInterface {
    //TODO Generate probability of a note playing at start C is 100%, afterwards all notes of chord have
    // equal probability. Set them to 100/array.length and the rest to 0

    public void generateMusic();

    void generateMusic(Synthesizer synthesizerMG, MidiChannel midiChannelMG);//End generateMusic


    public void saveMusic(); //As binary
    public void readMusic(); //From binary file

}//End MarkovChainInterface

////////////////////////////////////////////////////////



//This loops through all the notes in my cMajor array
//<editor-fold desc="For Loop Debugging">
        /*
        for(int i = 0; i<cMajor.length;i++){
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if(i == 0){
                midiChannel1.noteOn(cMajor[0], velocity);
            }
            else if(i == 1){
                midiChannel1.noteOn(cMajor[1], velocity);
            }
            else if(i == 2){
                midiChannel1.noteOn(cMajor[2], velocity);
            }
            else if(i == 3){
                midiChannel1.noteOn(cMajor[3], velocity);
            }
            else if(i == 4){
                midiChannel1.noteOn(cMajor[4], velocity);
            }
            else if(i == 5){
                midiChannel1.noteOn(cMajor[5], velocity);
            }
            else {
                midiChannel1.noteOn(cMajor[6], velocity);
                System.out.println("Last Note Played");
            }//End else
        }//End for
        */


        ///////////////////////////////////////////////////////////

        /*
        //Loop to alter pitch of a note over time for debugging
        for(int i = 0; i<200; i++){
            try {
                Thread.sleep(100);
                //   (noteNumber = note pitch 0-127, velocity = volume/brightness)
               // midiChannel1.noteOn(sound + i,velocity);
                //System.out.println("Note should play");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }//End catch
        }//End for
        */
//</editor-fold>
